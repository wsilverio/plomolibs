/**
* ░░░░░░░░░░░░░░▄▄▄▄▄▄▄▄▄▄▄▄░░░░░░░░░░░░░░
* ░░░░░░░░░░░░▄████████████████▄░░░░░░░░░░     @file    plomodefs.h
* ░░░░░░░░░░▄██▀░░░░░░░▀▀████████▄░░░░░░░░     @author  Wendeu
* ░░░░░░░░░▄█▀░░░░░░░░░░░░░▀▀██████▄░░░░░░     @date    Oct 2018
* ░░░░░░░░░███▄░░░░░░░░░░░░░░░▀██████░░░░░     @brief   Definições e macros úteis.
* ░░░░░░░░▄░░▀▀█░░░░░░░░░░░░░░░░██████░░░░
* ░░░░░░░█▄██▀▄░░░░░▄███▄▄░░░░░░███████░░░
* ░░░░░░▄▀▀▀██▀░░░░░▄▄▄░░▀█░░░░█████████░░
* ░░░░░▄▀░░░░▄▀░▄░░█▄██▀▄░░░░░██████████░░
* ░░░░░█░░░░▀░░░█░░░▀▀▀▀▀░░░░░██████████▄░
* ░░░░░░░▄█▄░░░░░▄░░░░░░░░░░░░██████████▀░
* ░░░░░░█▀░░░░▀▀░░░░░░░░░░░░░███▀███████░░
* ░░░▄▄░▀░▄░░░░░░░░░░░░░░░░░░▀░░░██████░░░
* ██████░░█▄█▀░▄░░██░░░░░░░░░░░█▄█████▀░░░
* ██████░░░▀████▀░▀░░░░░░░░░░░▄▀█████████▄
* ██████░░░░░░░░░░░░░░░░░░░░▀▄████████████
* ██████░░▄░░░░░░░░░░░░░▄░░░██████████████
* ██████░░░░░░░░░░░░░▄█▀░░▄███████████████
* ███████▄▄░░░░░░░░░▀░░░▄▀▄███████████████
*/

#ifndef PLOMODEFS_H
#define PLOMODEFS_H

/////////////////////////////////////////////////////////////////
// bibliotecas
/////////////////////////////////////////////////////////////////
// nativas
//#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
// usuário
#include "plomotypes.h"
/////////////////////////////////////////////////////////////////
// definições
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// dados personalizados, enumerações
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// variáveis públicas
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// macros
/////////////////////////////////////////////////////////////////

/**
*  \def ABS(x)
*   @brief      Calcula o valor absoluto do argumento \a x.
*   @param      x valor de entrada.
*   @return     valor absoluto de \a x.
*/
#define ABS(x) ( ((x)>0) ? (x) : -(x) )

/**
*  \def MAX(x, y)
*   @brief      Determina o maior valor entre os argumentos \a x e \a y.
*   @param      x primeiro valor.
*   @param      y segundo valor.
*   @return     maior valor entre \a x e \a y.
*/
#define MAX(x, y) ( (x)>(y) ? (x) : (y) )

/**
*  \def MIN(x, y)
*   @brief      Determina o menor valor entre os argumentos \a x e \a y.
*   @param      x primeiro valor.
*   @param      y segundo valor.
*   @return     menor valor entre \a x e \a y.
*/
#define MIN(x, y) ( (x)>(y) ? (y) : (x) )

/////////////////////////////////////////////////////////////////
// protótipo das funções
/////////////////////////////////////////////////////////////////

#endif // PLOMODEFS_H
